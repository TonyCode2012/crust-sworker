#ifndef IPCREPORT_H_
#define IPCREPORT_H_

#define IPC_DATATYPE_KEYPAIR    1
#define IPC_DATATYPE_REPORT     2

#define IPC_MK_ERROR(x)     (0x00000000|(x))

typedef enum _ipc_status_t {
    IPC_SUCCESS                 = IPC_MK_ERROR(0x0000),
    INVALID_PARAMETER           = IPC_MK_ERROR(0x00E1),
    VALID_SESSION               = IPC_MK_ERROR(0x00E2),
    INVALID_SESSION             = IPC_MK_ERROR(0x00E3),
    ATTESTATION_ERROR           = IPC_MK_ERROR(0x00E4),
    ATTESTATION_SE_ERROR        = IPC_MK_ERROR(0x00E5),
    IPP_ERROR                   = IPC_MK_ERROR(0x00E6),
    NO_AVAILABLE_SESSION_ERROR  = IPC_MK_ERROR(0x00E7),
    MALLOC_ERROR                = IPC_MK_ERROR(0x00E8),
    ERROR_TAG_MISMATCH          = IPC_MK_ERROR(0x00E9),
    OUT_BUFFER_LENGTH_ERROR     = IPC_MK_ERROR(0x00EA),
    INVALID_REQUEST_TYPE_ERROR  = IPC_MK_ERROR(0x00EB),
    INVALID_PARAMETER_ERROR     = IPC_MK_ERROR(0x00EC),
    ENCLAVE_TRUST_ERROR         = IPC_MK_ERROR(0x00ED),
    ENCRYPT_DECRYPT_ERROR       = IPC_MK_ERROR(0x00EE),
    DUPLICATE_SESSION           = IPC_MK_ERROR(0x00EF),
    ATTESTATION_BADREQUEST      = IPC_MK_ERROR(0x00F1),
    IPC_TRANSFER_ERROR          = IPC_MK_ERROR(0x00F2),
    IPC_SENDMSG_ERROR           = IPC_MK_ERROR(0x00F3),
    IPC_RECVMSG_ERROR           = IPC_MK_ERROR(0x00F4),
    IPC_CREATE_THREAD_ERR       = IPC_MK_ERROR(0x00F5),
    IPC_SGX_ERROR               = IPC_MK_ERROR(0x00F6),
    IPC_BADSESSIONTYPE          = IPC_MK_ERROR(0x00F7),
    IPC_DATATYPE_ERROR          = IPC_MK_ERROR(0x00F8),
    INIT_CONFIG_ERROR           = IPC_MK_ERROR(0x00F9),
    INIT_IPC_ERROR              = IPC_MK_ERROR(0x00FA),
    INIT_ENCLAVE_ERROR          = IPC_MK_ERROR(0x00FB),
    INIT_COMPONENT_ERROR        = IPC_MK_ERROR(0x00FC),
    ENTRY_NETWORK_ERROR         = IPC_MK_ERROR(0x00FD),
    WAITPID_ERROR               = IPC_MK_ERROR(0x00FE),
    FORK_NEW_PROCESS_ERROR      = IPC_MK_ERROR(0x00FF),
} ipc_status_t;

#endif
